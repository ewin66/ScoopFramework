g<#@ template language="C#" hostspecific="True" debug="True" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ include file="GeneralManager.tt"#>
<#@ assembly name="$(ProjectDir)Bin\Debug\Infoline.Framework.dll" #>
<#@ import namespace="Infoline.Framework.CodeGeneration.CodeGenerators" #>
<#@ output extension=".txt" #>
<#
	CreateProject.Run(Host, GenerationEnvironment);
#>
<#+
	public class CreateProject
	{
		public static void Run(ITextTemplatingEngineHost host, StringBuilder template)
		{
			var gen = new ProjectGenerator(); 
			var manager  = Manager.Create(host, template, false);
			var solutionName = manager.SolutionName;
			var solutionDirectory = manager.SolutionDirectory;
			var frameworkProjectFilePath = manager.GetProjectFilePath("Infoline.Framework");
			var frameworkProjecDirectory = Path.GetDirectoryName(frameworkProjectFilePath);

			//template.AppendLine(frameworkProjecDirectory);
				
			var frameworkLibsDir = Path.Combine(frameworkProjecDirectory, "Libs");
			
			var businessDataProjectExtension = "BusinessData";
			var businessDataProjectName = string.Format("{0}.{1}", solutionName, businessDataProjectExtension);
			var businessDataProjectFile = Path.Combine(solutionDirectory, businessDataProjectName, string.Format("{0}.csproj", businessDataProjectName));
			if(!manager.ProjectExists(businessDataProjectFile))
			{
				var bussinessFiles = gen.GetBussiness(solutionName, businessDataProjectExtension); 
				foreach(var file in bussinessFiles)
				{	
					var path = Path.Combine(solutionDirectory, businessDataProjectName, file.Key);
					var dir = Path.GetDirectoryName(path);
					Directory.CreateDirectory(dir);
					File.WriteAllText(path, file.Value);
				}
				manager.AddProject(businessDataProjectFile);
				manager.AddPojectReferance(businessDataProjectName, "Infoline.Framework");
				manager.AddReferance(businessDataProjectName, "System.ComponentModel.Composition");
				manager.AddReferance(businessDataProjectName, "System.Configuration");
				manager.AddReferance(businessDataProjectName, "System.Web");
					
				var businessLibsDir = Path.Combine(solutionDirectory, businessDataProjectName, "Libs");
				CopyDirectory(frameworkLibsDir, businessLibsDir);
			}

			var businessAccessProjectExtension = "BusinessAccess";
			var businessAccessProjectName = string.Format("{0}.{1}", solutionName, businessAccessProjectExtension);
			var businessAccessProjectFile = Path.Combine(solutionDirectory, businessAccessProjectName, string.Format("{0}.csproj", businessAccessProjectName));
			if(!manager.ProjectExists(businessAccessProjectFile))
			{
				var bussinessFiles = gen.GetBussiness(solutionName, businessAccessProjectExtension); 
				foreach(var file in bussinessFiles)
				{	
					var path = Path.Combine(solutionDirectory, businessAccessProjectName, file.Key);
					var dir = Path.GetDirectoryName(path);
					Directory.CreateDirectory(dir);
					File.WriteAllText(path, file.Value);
				}
				manager.AddProject(businessAccessProjectFile);

				manager.AddPojectReferance(businessAccessProjectName, "Infoline.Framework");
				manager.AddReferance(businessAccessProjectName, "System.configuration");
				manager.AddReferance(businessAccessProjectName, "System.ComponentModel.Composition");
				manager.AddReferance(businessAccessProjectName, "System.Web");
				manager.AddPojectReferance(businessAccessProjectName, businessDataProjectName);
			
				var businessLibsDir = Path.Combine(solutionDirectory, businessAccessProjectName, "Libs");
				CopyDirectory(frameworkLibsDir, businessLibsDir);
			}

			var webServiceProjectExtension = "WebService";
			var webServiceProjectName = string.Format("{0}.{1}", solutionName, webServiceProjectExtension);
			var webServiceProjectFile = Path.Combine(solutionDirectory, webServiceProjectName, string.Format("{0}.csproj", webServiceProjectName));
			if(!manager.ProjectExists(webServiceProjectFile))
			{
				var webServiceFiles = gen.GetWebServiceProject(solutionName, webServiceProjectExtension); 
				foreach(var file in webServiceFiles)
				{	
					var path = Path.Combine(solutionDirectory, webServiceProjectName, file.Key);
					var dir = Path.GetDirectoryName(path);
					Directory.CreateDirectory(dir);
					File.WriteAllText(path, file.Value);
					
				}
				manager.AddProject(webServiceProjectFile);
				manager.AddReferance(webServiceProjectName, "System.ComponentModel.Composition");
				manager.AddPojectReferance(webServiceProjectName, "Infoline.Framework");
				manager.AddPojectReferance(webServiceProjectName, businessDataProjectName);
				manager.AddPojectReferance(webServiceProjectName, businessAccessProjectName);

				var webServiceProjectLibsDir = Path.Combine(solutionDirectory, webServiceProjectName, "Libs");
				CopyDirectory(frameworkLibsDir, webServiceProjectLibsDir);
			}
			

			manager.StartHeader();
			manager.EndBlock();

			manager.StartFooter();
			manager.EndBlock();

			var templates = gen.GetTemplates();
			foreach(var kvp in templates)
			{{	
				string project = businessDataProjectName;
				string directory = @"Templates";
				string fileName = kvp.Key;
				manager.StartNewFile(project, directory, fileName);
				template.AppendLine(kvp.Value); 
				manager.EndBlock();
			}}
			manager.Process(true);

		}

		

		public static void CopyDirectory(string source_dir, string destination_dir)
		{
		    Directory.CreateDirectory(destination_dir);
			foreach (string file_name in Directory.GetFiles(source_dir, "*.*", System.IO.SearchOption.AllDirectories))
			{
			    File.Copy(file_name, Path.Combine(destination_dir, Path.GetFileName(file_name)), true );
			}

		}
	}
#>